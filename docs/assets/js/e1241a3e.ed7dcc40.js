"use strict";(self.webpackChunkdevwks_2122_docs=self.webpackChunkdevwks_2122_docs||[]).push([[341],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,s=function(e,t){if(null==e)return{};var n,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(h,a(a({ref:t},c),{},{components:n})):o.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,a=new Array(r);a[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<r;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(7462),s=(n(7294),n(3905));const r={sidebar_position:2},a="Creating Cookies and Testing",i={unversionedId:"passport/cookies",id:"passport/cookies",title:"Creating Cookies and Testing",description:"Creating a Session Cookie",source:"@site/docs/passport/02-cookies.mdx",sourceDirName:"passport",slug:"/passport/cookies",permalink:"/DEVWKS-2122/passport/cookies",draft:!1,editUrl:"https://cisco.com/docs/passport/02-cookies.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"WebEx OAuth & Passport",permalink:"/DEVWKS-2122/passport/passport-config"},next:{title:"Creating Middleware",permalink:"/DEVWKS-2122/passport/middleware"}},p={},l=[{value:"Creating a Session Cookie",id:"creating-a-session-cookie",level:2},{value:"Update Passport to Use a Cookie",id:"update-passport-to-use-a-cookie",level:3},{value:"Testing",id:"testing",level:3}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"creating-cookies-and-testing"},"Creating Cookies and Testing"),(0,s.kt)("h2",{id:"creating-a-session-cookie"},"Creating a Session Cookie"),(0,s.kt)("p",null,"To create a cookie for our users. We need to tell Passport to use a cookie and to do this we need the library called ",(0,s.kt)("inlineCode",{parentName:"p"},"cookie-session"),"."),(0,s.kt)("h3",{id:"update-passport-to-use-a-cookie"},"Update Passport to Use a Cookie"),(0,s.kt)("p",null,"Open the ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js")," from the root directory in VSCode. The below code should be pasted into that file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=index.js showLineNumbers",title:"index.js",showLineNumbers:!0},"const express = require('express');\nconst mongoose = require('mongoose');\nconst cookieSession = require('cookie-session');\nconst passport = require('passport');\nconst keys = require('./config/keys');\nrequire('./models/User');\nrequire('./services/passport');\nrequire('./models/Event');\n\nconst port = 5000;\n\nmain().catch((err) => console.log(err));\n\nasync function main() {\n  await mongoose.connect('mongodb://localhost:27017');\n  // use `await mongoose.connect('mongodb://user:password@localhost:27017/test');` if your database has auth enabled\n}\n\nconst app = express();\napp.use(express.json());\n\napp.use(\n  cookieSession({\n    maxAge: 2 * 24 * 60 * 60 * 1000,\n    keys: [keys.cookieKey],\n  })\n);\n\napp.use(function (request, response, next) {\n  if (request.session && !request.session.regenerate) {\n    request.session.regenerate = (cb) => {\n      cb();\n    };\n  }\n  if (request.session && !request.session.save) {\n    request.session.save = (cb) => {\n      cb();\n    };\n  }\n  next();\n});\n\napp.use(passport.initialize());\napp.use(passport.session());\n\nrequire('./routes/authRoutes')(app);\n\nrequire('./routes/eventRoutes')(app);\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n")),(0,s.kt)("p",null,"In the code above we import the Passport service, User model, cookieSession library, and Passport. We then tell the ",(0,s.kt)("inlineCode",{parentName:"p"},"app")," to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"cookieSession")," library. ",(0,s.kt)("inlineCode",{parentName:"p"},"cookieSession")," takes an object as an argument. The object has two properties in it: ",(0,s.kt)("inlineCode",{parentName:"p"},"maxAge")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"keys"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"maxAge")," property is the amount of time a cookie has before it expires in milliseconds. The ",(0,s.kt)("inlineCode",{parentName:"p"},"keys")," property is a list of keys that can be used to encrypt the session cookie."),(0,s.kt)("p",null,"Then we need to tell Passport to use the cookie in a session. This is done with only two additional lines. The ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," function tells passport to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"serialize")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"deserialize")," functions we defined earlier. The ",(0,s.kt)("inlineCode",{parentName:"p"},"session")," function tells passport to use sessions after an authentication flow completes."),(0,s.kt)("h3",{id:"testing"},"Testing"),(0,s.kt)("p",null,"To test that our flow works; in a browser, go to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/auth/cisco"),". It should take you to a login and ask for permission to give the app your info. After this, it will redirect to ",(0,s.kt)("inlineCode",{parentName:"p"},"/event")," on the frontend."),(0,s.kt)("p",null,"If you check the CLI there should be some json data. This is the profile we logged out in the Passport service and is the raw user data before we parsed through it to store only some parts of it. It should look like what is below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"showLineNumber",showLineNumber:!0},"{\n    provider: 'cisco-spark',\n    id: 'Y2lzYOWE',\n    displayName: 'Ryan MacLennan',\n    emails: [ 'rymaclen@cisco.com' ],\n    avatar: 'https://63cd9a~9a06f454eaf94e439575028d59b2b171~1600',\n    created: '1900-06-21',\n    _json: {\n        id: 'Y2lzY22NkOWE',\n        emails: [ 'rymaclen@cisco.com' ],\n        phoneNumbers: [ [Object], [Object] ],\n        displayName: 'Ryan MacLennan',\n        nickName: 'Ryan',\n        firstName: 'Ryan',\n        lastName: 'MacLennan',\n        userName: 'rymaclen@cisco.com',\n        avatar: 'https://avatar-prod-us-east-2.webexcontent.com/06f454eaf94e439575028d59b2b171~1600',\n        orgId: 'OSVpBVElPTi8xZWI2NWZkZi05NjQ',\n        created: '1900-06-21',\n        lastModified: '2023-01-11T17:57:33.357Z',\n        lastActivity: '2023-01-17T23:04:20.927Z',\n        status: 'active',\n        type: 'person',\n        department: '0',\n        title: 'Technical Marketing Engineer',\n    }\n}\n")),(0,s.kt)("p",null,"You may have noticed that the top right of the frontend still says ",(0,s.kt)("strong",{parentName:"p"},"login"),". Were we actualy authenticated or not? We can check that by going to the ",(0,s.kt)("inlineCode",{parentName:"p"},"current_user")," route we created. This will only show data is there is a user logged in. Go to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/current_user"),". It should return the data for our user."),(0,s.kt)("p",null,"Now lets logout and test this again. Go to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/logout"),", then back to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/current_user"),"."),(0,s.kt)("p",null,"The logout should return you the frontend and it will still say login. But checking the ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/current_user")," route will return a blank screen. Now we know that our authentication flow works and we are able to successfully create and teardown a session."),(0,s.kt)("p",null,"In the next section we will create a middleware that will intercept requests and check if a user is logged in."))}u.isMDXComponent=!0}}]);