"use strict";(self.webpackChunkdevwks_2122_docs=self.webpackChunkdevwks_2122_docs||[]).push([[288],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),h=s,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:s,a[1]=i;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(7462),s=(n(7294),n(3905));const o={sidebar_position:3},a="Creating Middleware",i={unversionedId:"passport/middleware",id:"passport/middleware",title:"Creating Middleware",description:"We need to update some redirects and make the backend require the users to be logged in to access the events API. We will make a middleware that will be put in the event routes to prevent unauthorized access to the event API.",source:"@site/docs/passport/middleware.mdx",sourceDirName:"passport",slug:"/passport/middleware",permalink:"/DEVWKS-2122/passport/middleware",draft:!1,editUrl:"https://cisco.com/docs/passport/middleware.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Creating Cookies and Testing",permalink:"/DEVWKS-2122/passport/cookies"},next:{title:"Front-end Part 1",permalink:"/DEVWKS-2122/react-p-1"}},l={},d=[{value:"Testing Unauthorized API Calls",id:"testing-unauthorized-api-calls",level:2},{value:"Create the requireLogin Middleware",id:"create-the-requirelogin-middleware",level:2},{value:"Event Routes",id:"event-routes",level:2},{value:"Testing For a User",id:"testing-for-a-user",level:2},{value:"Unauthenticated User",id:"unauthenticated-user",level:3},{value:"Authenticated User",id:"authenticated-user",level:3},{value:"Adding an Authorized User check",id:"adding-an-authorized-user-check",level:3}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"creating-middleware"},"Creating Middleware"),(0,s.kt)("p",null,"We need to update some redirects and make the backend require the users to be logged in to access the events API. We will make a middleware that will be put in the event routes to prevent unauthorized access to the event API."),(0,s.kt)("h2",{id:"testing-unauthorized-api-calls"},"Testing Unauthorized API Calls"),(0,s.kt)("p",null,"In the web browser, go to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/event"),". It should return all of the entries in our database."),(0,s.kt)("p",null,"Since we logged out in the previous section we can see that this is not a good idea. We need to add a check on the event routes to see if someone is logged in."),(0,s.kt)("h2",{id:"create-the-requirelogin-middleware"},"Create the requireLogin Middleware"),(0,s.kt)("p",null,"Create a new directory called ",(0,s.kt)("inlineCode",{parentName:"p"},"middlewares")," in the root of the project. In this directory make a new file called ",(0,s.kt)("inlineCode",{parentName:"p"},"requirelogin.js")),(0,s.kt)("p",null,"The file will have the below code in it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=middlewares/requireLogin.js showLineNumbers",title:"middlewares/requireLogin.js",showLineNumbers:!0},"module.exports = (req, res, next) => {\n  if (!req.user) {\n    return res\n      .status(401)\n      .send({ error: 'You must be logged in to perform this action.' });\n  }\n  next();\n};\n")),(0,s.kt)("p",null,"This code checks if the request has a user attached and if it does not, we send back a 401 and a message."),(0,s.kt)("p",null,"Now we can update the routes."),(0,s.kt)("h2",{id:"event-routes"},"Event Routes"),(0,s.kt)("p",null,"We need import the ",(0,s.kt)("inlineCode",{parentName:"p"},"requireLogin")," middlware we created in the ",(0,s.kt)("inlineCode",{parentName:"p"},"eventRoute.js")," file and then add it to the arguments of our routes."),(0,s.kt)("p",null,"It is shown in the below code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=routes/eventRoutes.js showLineNumbers",title:"routes/eventRoutes.js",showLineNumbers:!0},"const mongoose = require('mongoose');\nconst Event = mongoose.model('event');\n//add-line\nconst requireLogin = require('../middlewares/requireLogin');\n\nmodule.exports = (app) => {\n  //add-line\n  app.get('/api/event', requireLogin, async (req, res) => {\n    const events = await Event.find({});\n    if (events) {\n      console.log(events);\n      res.json(events);\n    }\n  });\n\n  //add-line\n  app.post('/api/event', requireLogin, async (req, res) => {\n    const title = req.body.title;\n    console.log(title);\n    const response = await new Event({ title, active: true }).save();\n    if (response) {\n      res.send('event created');\n    } else {\n      res.send('not created');\n    }\n  });\n\n  //add-line\n  app.put('/api/event', requireLogin, async (req, res) => {\n    const { _id, status } = req.body;\n    if (status === 'resolve') {\n      const resolveEvent = await Event.findByIdAndUpdate(_id, {\n        active: 'false',\n      });\n      res.send(resolveEvent);\n    }\n  });\n\n  //add-line\n  app.delete('/api/event', requireLogin, async (req, res) => {\n    const id = req.body._id;\n    const removeEvent = await Event.deleteOne({ _id: id });\n    res.send(removeEvent);\n  });\n};\n")),(0,s.kt)("p",null,"Lets test if this prevents an unauthenticated user from accessing the events."),(0,s.kt)("h2",{id:"testing-for-a-user"},"Testing For a User"),(0,s.kt)("h3",{id:"unauthenticated-user"},"Unauthenticated User"),(0,s.kt)("p",null,"Go back to the ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/event")," route in the browser. We should receive a ",(0,s.kt)("em",{parentName:"p"},"You must be logged in to perform this action.")," message now."),(0,s.kt)("p",null,"This proves we have stopped unauthenticated users from accessing events. Lets login and make sure we can get them as an authenticated user."),(0,s.kt)("h3",{id:"authenticated-user"},"Authenticated User"),(0,s.kt)("p",null,"Open the frontend on ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:3000/"),". We should see no events in the dashboard. Now login to the application using ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:3000/auth/cisco"),". After going through the flow, it should return you the frontend with the events bein shown. We can also check ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:5000/api/event"),". We should see the same database entries we saw before adding the middleware."),(0,s.kt)("p",null,"However this is not enough, we need to make sure only specific users can access these routes."),(0,s.kt)("p",null,"Lets create an ",(0,s.kt)("em",{parentName:"p"},"authorized users")," list to check if the user is authorized to access the event routes."),(0,s.kt)("h3",{id:"adding-an-authorized-user-check"},"Adding an Authorized User check"),(0,s.kt)("p",null,"We will create one more middle to make this possible. In the ",(0,s.kt)("inlineCode",{parentName:"p"},"middlewares")," directory create a new file called ",(0,s.kt)("inlineCode",{parentName:"p"},"authorizedUser.js"),". Then paste the below code into it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title='middlewares/authorizedUser.js' showLineNumbers",title:"'middlewares/authorizedUser.js'",showLineNumbers:!0},"module.exports = (req, res, next) => {\n  const authorizedUsers = ['jameson@cisco.com'];\n  if (!authorizedUsers.includes(req.user.ciscoId)) {\n    return res\n      .status(401)\n      .send({ error: 'You are not authorized to access this resource.' });\n  }\n  next();\n};\n")),(0,s.kt)("p",null,"We have a list of authorized users at the top of the file and then our if statement checks if the the currently logged in user is in that list. If not, they are not allowed access."),(0,s.kt)("p",null,"Lets add this to the event routes."),(0,s.kt)("p",null,"Replace what is in the ",(0,s.kt)("inlineCode",{parentName:"p"},"routes/eventRotues.js")," with the below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title='routes/eventRoutes.js' showLineNumbers",title:"'routes/eventRoutes.js'",showLineNumbers:!0},"const mongoose = require('mongoose');\nconst Event = mongoose.model('event');\nconst requireLogin = require('../middlewares/requireLogin');\nconst authorizedUser = require('../middlewares/authorizedUser');\n\nmodule.exports = (app) => {\n  app.get('/api/event', requireLogin, authorizedUser, async (req, res) => {\n    const events = await Event.find({});\n    if (events) {\n      console.log(events);\n      res.json(events);\n    }\n  });\n\n  app.post('/api/event', requireLogin, authorizedUser, async (req, res) => {\n    const title = req.body.title;\n    console.log(title);\n    const response = await new Event({ title, active: true }).save();\n    if (response) {\n      res.send('event created');\n    } else {\n      res.send('not created');\n    }\n  });\n\n  app.put('/api/event', requireLogin, authorizedUser, async (req, res) => {\n    const { _id, status } = req.body;\n    if (status === 'resolve') {\n      const resolveEvent = await Event.findByIdAndUpdate(_id, {\n        active: 'false',\n      });\n      res.send(resolveEvent);\n    }\n  });\n\n  app.delete('/api/event', requireLogin, authorizedUser, async (req, res) => {\n    const id = req.body._id;\n    const removeEvent = await Event.deleteOne({ _id: id });\n    res.send(removeEvent);\n  });\n};\n")),(0,s.kt)("p",null,"Lets test this. Go back to ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:3000/events")," and refresh the page. We should now see no events. We have successfully made it so that an unauthorized user cannot access the events."),(0,s.kt)("p",null,"In the ",(0,s.kt)("inlineCode",{parentName:"p"},"authorizedUser.js")," file, please add your own username into the list for the rest of the workshop."),(0,s.kt)("p",null,"Now we can configure the frontend to have a proper state when logged in or out."))}c.isMDXComponent=!0}}]);