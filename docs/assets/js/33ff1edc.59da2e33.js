"use strict";(self.webpackChunkdevwks_2122_docs=self.webpackChunkdevwks_2122_docs||[]).push([[127],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,u=d["".concat(l,".").concat(h)]||d[h]||m[h]||r;return n?o.createElement(u,i(i({ref:t},c),{},{components:n})):o.createElement(u,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4},i="MongoDb Configuration",s={unversionedId:"mongodb-1",id:"mongodb-1",title:"MongoDb Configuration",description:"Mongo is the database this application uses to store data. It has events that we can create or remove, and it will hold the user information we get back from WebEx.",source:"@site/docs/04-mongodb-1.mdx",sourceDirName:".",slug:"/mongodb-1",permalink:"/DEVWKS-2122/mongodb-1",draft:!1,editUrl:"https://cisco.com/docs/04-mongodb-1.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"OAuth flow",permalink:"/DEVWKS-2122/oauth-explain"},next:{title:"Passport Configurations",permalink:"/DEVWKS-2122/category/passport-configurations"}},l={},p=[{value:"Creating a User model",id:"creating-a-user-model",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mongodb-configuration"},"MongoDb Configuration"),(0,a.kt)("p",null,"Mongo is the database this application uses to store data. It has events that we can create or remove, and it will hold the user information we get back from WebEx."),(0,a.kt)("p",null,"This workshop uses a library called ",(0,a.kt)("inlineCode",{parentName:"p"},"Mongoose")," to handle the database connection and performing database operations for us."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js"),", we can see the few lines that mention Mongoose."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=index.js showLineNumbers",title:"index.js",showLineNumbers:!0},"const express = require('express');\n//highlight-next-line\nconst mongoose = require('mongoose');\nrequire('./services/passport');\nrequire('./models/Event');\nreferences;\n\nconst port = 5000;\n\nmain().catch((err) => console.log(err));\n//highlight-next-line\nasync function main() {\n  //highlight-next-line\n  await mongoose.connect('mongodb://localhost:27017');\n  //highlight-next-line\n  // use `await mongoose.connect('mongodb://user:password@localhost:27017/test');` if your database has auth enabled\n  //highlight-next-line\n}\n\nconst app = express();\napp.use(express.json());\nrequire('./routes/authRoutes')(app);\n\nrequire('./routes/eventRoutes')(app);\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n")),(0,a.kt)("p",null,"At the top of the file, we import Mongoose using a require statement. A little further down, we have an async function that waits for mongoose to connect the Mongo database. This line is prefilled with the Mongo URI that we will use to connect to the database."),(0,a.kt)("p",null,"The rest of the Mongoose components we need to control data is in this line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"require('./routes/eventRoutes')(app);\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"routes/eventRoutes.js")," file, there is one line at the top that we want to look at."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const Event = mongoose.model('event');\n")),(0,a.kt)("p",null,"This line above references a ",(0,a.kt)("inlineCode",{parentName:"p"},"model"),". Mongoose uses ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," to interact with the database. Each ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," is the format of one entry in the database. We can use this model to query a specific collection of data by doing an update, reading, and writing to that collection of data. The ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," will contain all the information needed to make those queries. It is good to note, that each ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," corresponds to one collection in the Mongo database."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"/models/Event.js")," file, we can see how a ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," is formatted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=models/Event.js showLineNumbers",title:"models/Event.js",showLineNumbers:!0},"const mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\nconst eventSchema = new Schema({\n  title: String, // String is shorthand for {type: String}\n  active: Boolean,\n});\n\nconst event = mongoose.model('event', eventSchema);\n")),(0,a.kt)("p",null,"In the code of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Event.js")," file, we can see it imports ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema")," from Mongoose. A ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema")," is the blueprint for the ",(0,a.kt)("inlineCode",{parentName:"p"},"model"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema")," for this model only has two properties: a string called ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," and a Boolean called ",(0,a.kt)("inlineCode",{parentName:"p"},"active"),". These are the default fields that are always required when you want to create a new event.  "),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This does not mean we cannot add more data to an event though. We can add as many properties as we want, but those two must be included.  ")),(0,a.kt)("p",null,"After the ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema")," has been created, we can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," out of it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"mongoose.model")," function takes two arguments. The first argument is the name of the collection (in this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"event"),") and the second is the ",(0,a.kt)("inlineCode",{parentName:"p"},"schema")," that was created (",(0,a.kt)("inlineCode",{parentName:"p"},"eventSchema"),"). When the ",(0,a.kt)("inlineCode",{parentName:"p"},"mongoose.model")," is called, it will create a new collection called ",(0,a.kt)("inlineCode",{parentName:"p"},"event")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema")," is the interface to accessing the collection.  "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If there is already a collection in the database called ",(0,a.kt)("inlineCode",{parentName:"p"},"event"),", Mongoose will not recreate the ",(0,a.kt)("inlineCode",{parentName:"p"},"event")," collection.")),(0,a.kt)("p",null,"We have looked at some examples of what we will be doing, but now we need to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," model."),(0,a.kt)("h2",{id:"creating-a-user-model"},"Creating a User model"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," directory, we need to create a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"User.js")),(0,a.kt)("p",null,"After it is created, open the ",(0,a.kt)("inlineCode",{parentName:"p"},"User.js")," file in the code editor. We need to do our initial imports like in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Event")," model."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=models/User.js showLineNumbers",title:"models/User.js",showLineNumbers:!0},"const mongoose = require('mongoose');\nconst { Schema } = mongoose;\nconst userSchema = new Schema({\n  ciscoId: String,\n  name: String,\n  departmentId: String,\n});\n\nmongoose.model('users', userSchema);\n")),(0,a.kt)("p",null,"After importing Mongoose and pulling out the ",(0,a.kt)("inlineCode",{parentName:"p"},"Schema")," function, we can create our ",(0,a.kt)("inlineCode",{parentName:"p"},"userSchema"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"userSchema")," will contain three properties: ",(0,a.kt)("inlineCode",{parentName:"p"},"ciscoId"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"departmentId"),". These will all be values we store after the authentication flow has finished."),(0,a.kt)("p",null,"We now need to call ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," function to create a new collection called ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," and to create an interface with the ",(0,a.kt)("inlineCode",{parentName:"p"},"userSchema"),"."),(0,a.kt)("p",null,"We have finished the MongoDb portion of the workshop. We will now start working with Passport and WebEx OAuth."))}d.isMDXComponent=!0}}]);