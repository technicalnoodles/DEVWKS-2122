"use strict";(self.webpackChunkdevwks_2122_docs=self.webpackChunkdevwks_2122_docs||[]).push([[555],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=l(t),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[c]="string"==typeof e?e:r,i[1]=d;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2545:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:5},i="Function Code Part 2",d={unversionedId:"webex-integration/function-coding-p-2",id:"webex-integration/function-coding-p-2",title:"Function Code Part 2",description:"So far we have setup our funciton to check if the port is down, import the requests library and store the information we need to make our API call.  Now we will setup our API call.",source:"@site/docs/webex-integration/function-coding-p-2.mdx",sourceDirName:"webex-integration",slug:"/webex-integration/function-coding-p-2",permalink:"/DEVWKS-2122/webex-integration/function-coding-p-2",draft:!1,editUrl:"https://cisco.com/docs/webex-integration/function-coding-p-2.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Function Code Part 1",permalink:"/DEVWKS-2122/webex-integration/function-coding-p-1"},next:{title:"Function Code Part 3",permalink:"/DEVWKS-2122/webex-integration/function-coding-p-3"}},s={},l=[{value:"API URL",id:"api-url",level:2},{value:"API Payload",id:"api-payload",level:2},{value:"API headers",id:"api-headers",level:2},{value:"Enviroment variable import",id:"enviroment-variable-import",level:3},{value:"Declare header variable",id:"declare-header-variable",level:3},{value:"Python Requests API call",id:"python-requests-api-call",level:2}],p={toc:l};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"function-code-part-2"},"Function Code Part 2"),(0,r.kt)("p",null,"So far we have setup our funciton to check if the port is down, import the ",(0,r.kt)("inlineCode",{parentName:"p"},"requests")," library and store the information we need to make our API call.  Now we will setup our API call."),(0,r.kt)("p",null,"We will add the Meraki API URL that will be used to make the call, create a payload to be sent, and create the headers of the request. "),(0,r.kt)("h2",{id:"api-url"},"API URL"),(0,r.kt)("p",null,"The Meraki URL will be modified to use the device serial number and port number to send the shutdown request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers'",title:"'lambda_function.py","showLineNumbers'":!0},"import json\ndef lambda_handler(event, context):\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n    \n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    #this line has the base URL of https://api.meraki.com/api/v1/devices/ and then concatenates the device serial number and port number\n    #add-line\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n        \n")),(0,r.kt)("h2",{id:"api-payload"},"API Payload"),(0,r.kt)("p",null,"Now let us create the pay load that will be sent.  All we are doing is making an object with ",(0,r.kt)("inlineCode",{parentName:"p"},"enabled: false")," as the only value in it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers'",title:"'lambda_function.py","showLineNumbers'":!0},"import json\ndef lambda_handler(event, context):\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n    \n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    #the payload we need to create will be an object that contains the 'enabled' boolean and it will be set to false\n    #add-line\n    payload = '{ \"enabled\": false }'\n    \n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n        \n")),(0,r.kt)("h2",{id:"api-headers"},"API headers"),(0,r.kt)("p",null,"The headers to be sent with the API request includes one called ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Cisco-Meraki-API-Key"),".  This header includes the API key that we obtained earlier in the workshop. To make sure the key is not exposed in our code, we will import it from the AWS Lambda environment variables. "),(0,r.kt)("p",null,"To do this we need to import the ",(0,r.kt)("inlineCode",{parentName:"p"},"os")," library and then import the key."),(0,r.kt)("h3",{id:"enviroment-variable-import"},"Enviroment variable import"),(0,r.kt)("p",null,"We will import the ",(0,r.kt)("inlineCode",{parentName:"p"},"os")," library at the top of the python file and access the variable after the payload variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers'",title:"'lambda_function.py","showLineNumbers'":!0},"import json\n#add-line\nimport os\ndef lambda_handler(event, context):\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n    \n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    payload = '{ \"enabled\": false }'\n    #add-line\n    apiKey = os.environ['XCiscoMerakiAPIKey']\n    \n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n")),(0,r.kt)("h3",{id:"declare-header-variable"},"Declare header variable"),(0,r.kt)("p",null,"We have stored the API key from the environment variable and now we can declare the headers. The header will be added after the ",(0,r.kt)("inlineCode",{parentName:"p"},"apiKey")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers'",title:"'lambda_function.py","showLineNumbers'":!0},"import json\nimport os\ndef lambda_handler(event, context):\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n    \n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    payload = '{ \"enabled\": false }'\n    apiKey = os.environ['XCiscoMerakiAPIKey']\n    #add-line\n    headers = {\n      #add-line\n      \"Content-Type\": \"application/json\",\n      #add-line\n      \"Accept\": \"application/json\",\n      #add-line\n      \"X-Cisco-Meraki-API-Key\": \"74005dcd80bec76f5dde1bfeee6d8ffa384cb27c\"\n      #add-line\n    }\n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n")),(0,r.kt)("p",null,"We can now create the API call since we have all the data we need to make the call"),(0,r.kt)("h2",{id:"python-requests-api-call"},"Python Requests API call"),(0,r.kt)("p",null,"We will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"requests")," library to make the API call to Meraki and shutdown the port we received an alert for. After we send the request, we will check that it was successful and return a 200 status with a message the port was shutdown successfully."),(0,r.kt)("p",null,"In this code block we will add the rest of the code we need, it will include the API call and the ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," statement checking for the success of the call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers'",title:"'lambda_function.py","showLineNumbers'":!0},"import json\nimport os\ndef lambda_handler(event, context):\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n    \n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    payload = '{ \"enabled\": false }'\n    apiKey = os.environ['XCiscoMerakiAPIKey']\n    headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"X-Cisco-Meraki-API-Key\": apiKey\n    }\n    #add-line\n    response = requests.request('PUT', merakiUrl, headers=headers, data = payload)\n    #add-line\n    if response.status_code == 200:\n      #add-line\n      return {\n          #add-line\n          'statusCode': 200,\n          #add-line\n          'body': json.dumps('Port shutdown')\n          #add-line\n        }\n        #add-line\n    else:\n      #add-line\n        return {\n          #add-line\n          'statusCode': 200,\n          #add-line\n          'body': json.dumps('Port not shutdown')\n          #add-line\n        }\n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n")),(0,r.kt)("p",null,"The final code should look like the below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers",title:"'lambda_function.py",showLineNumbers:!0},"import json\nimport os\ndef lambda_handler(event, context):\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n    \n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    payload = '{ \"enabled\": false }'\n    apiKey = os.environ['XCiscoMerakiAPIKey']\n    headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"X-Cisco-Meraki-API-Key\": apiKey\n    }\n    response = requests.request('PUT', merakiUrl, headers=headers, data = payload)\n    if response.status_code == 200:\n      return {\n          'statusCode': 200,\n          'body': json.dumps('Port shutdown')\n        }\n    else:\n        return {\n          'statusCode': 200,\n          'body': json.dumps('Port not shutdown')\n        }\n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n")),(0,r.kt)("p",null,"If we wanted to package this code and upload it, it would work if there was nothing in front of the function. But since there will be an API gateway in front of the Lambda function, we need to add some additional logic to make sure we parse the input properly."))}c.isMDXComponent=!0}}]);