"use strict";(self.webpackChunkdevwks_2122_docs=self.webpackChunkdevwks_2122_docs||[]).push([[715],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||s;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1885:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const s={sidebar_position:4},r="Passport Part 1",i={unversionedId:"passport-install",id:"passport-install",title:"Passport Part 1",description:"Passport is an authentication library that can be put into any javaScript applicaiton using Express. The Passport webpage is here.",source:"@site/docs/passport-install.mdx",sourceDirName:".",slug:"/passport-install",permalink:"/DEVWKS-2122/passport-install",draft:!1,editUrl:"https://cisco.com/docs/passport-install.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"OAuth flow",permalink:"/DEVWKS-2122/oauth-explain"},next:{title:"MongoDb Part 1",permalink:"/DEVWKS-2122/mongodb-1"}},l={},p=[{value:"Passport install",id:"passport-install",level:2},{value:"Passport Configuration",id:"passport-configuration",level:2},{value:"Passport Service",id:"passport-service",level:3},{value:"Authentication Routes",id:"authentication-routes",level:3},{value:"Running the routes and service",id:"running-the-routes-and-service",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"passport-part-1"},"Passport Part 1"),(0,o.kt)("p",null,"Passport is an authentication library that can be put into any javaScript applicaiton using ",(0,o.kt)("inlineCode",{parentName:"p"},"Express"),". The Passport webpage is ",(0,o.kt)("a",{parentName:"p",href:"https://www.passportjs.org/"},"here"),"."),(0,o.kt)("p",null,"If you look at the Passport webpage, you will notice they mention they use ",(0,o.kt)("inlineCode",{parentName:"p"},"Strategies"),". A strategy is their way of saying a process for authenticating to a service has been coded and made into a module for ease of use."),(0,o.kt)("p",null,"We will be using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Cisco - Spark")," ",(0,o.kt)("a",{parentName:"p",href:"https://www.passportjs.org/packages/passport-cisco-spark/"},"strategy")," in our application. But you can use any of the other ones they have too. Some examples are Facebook, Google, Github, LinkedIn, and the list can go on. But they will all work in the same way the Cisco strategy does."),(0,o.kt)("h2",{id:"passport-install"},"Passport install"),(0,o.kt)("p",null,"To add Passport and the Cisco Spark strategy to our project, we first need to be in the ",(0,o.kt)("inlineCode",{parentName:"p"},"DEVWKS-2122")," directory in the CLI. Once here, run the following command:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"npm install passport passport-cisco-spark")),(0,o.kt)("p",null,"After this has completed, we can start getting our Passport configuration setup."),(0,o.kt)("h2",{id:"passport-configuration"},"Passport Configuration"),(0,o.kt)("p",null,"The first thing we need to do to make sure everything will work properly is to add our WebEx integration ID and Secret a files called ",(0,o.kt)("inlineCode",{parentName:"p"},"keys.js"),". This file is does not exist yet, but there is an example file called ",(0,o.kt)("inlineCode",{parentName:"p"},"exKey.js")," located in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," directory.\nCopy the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client ID")," from the Webex Integration and paste it between the two single quotes next to ",(0,o.kt)("inlineCode",{parentName:"p"},"ciscoClientID"),". Do the same with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client Secret"),", pasting it on the line with ",(0,o.kt)("inlineCode",{parentName:"p"},"ciscoClientSecret"),"."),(0,o.kt)("p",null,"Now we need to rename the file to ",(0,o.kt)("inlineCode",{parentName:"p"},"keys.js"),". This will allow us to make sure all of the next steps will work."),(0,o.kt)("h3",{id:"passport-service"},"Passport Service"),(0,o.kt)("p",null,"We will first create our Passport service. The service is the configuration we need to be able to run this library and use the ",(0,o.kt)("inlineCode",{parentName:"p"},"cisco-spark")," strategy."),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"services")," directory, make a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"passport.js")," if it does not already exist."),(0,o.kt)("p",null,"Open this file in the Visual Studio Code(VSCode) editor."),(0,o.kt)("p",null,"To be able to use Passport we need to import it. Node does not use the newer ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," statements like you would see in React, so we need to use a require statement."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=services/passport.js showLineNumbers",title:"services/passport.js",showLineNumbers:!0},"const passport = require('passport');\n")),(0,o.kt)("p",null,"Next we need to import the ",(0,o.kt)("inlineCode",{parentName:"p"},"Cisco Spark")," strategy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=services/passport.js showLineNumbers",title:"services/passport.js",showLineNumbers:!0},"const passport = require('passport');\n//add-line\nconst CiscoStrategy = require('passport-cisco-spark').Strategy;\n")),(0,o.kt)("p",null,"The last things we need to import in this file are the keys from the WebEx integration. We are exporting them as an object from the ",(0,o.kt)("inlineCode",{parentName:"p"},"keys.js")," file, making them easy to access."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=services/passport.js showLineNumbers",title:"services/passport.js",showLineNumbers:!0},"const passport = require('passport');\nconst CiscoStrategy = require('passport-cisco-spark').Strategy;\n//add-line\nconst keys = require('../config/keys');\n")),(0,o.kt)("p",null,"Now that the imports are finished, we need to setup Passport to use the Strategy and to call back to our server after the authentication request has completed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=services/passport.js showLineNumbers",title:"services/passport.js",showLineNumbers:!0},"const passport = require('passport');\nconst CiscoStrategy = require('passport-cisco-spark').Strategy;\nconst keys = require('../config/keys');\n//add-line\npassport.use(\n  new CiscoStrategy(\n    //add-line\n    {\n      //add-line\n      clientID: keys.ciscoClientID,\n      //add-line\n      clientSecret: keys.ciscoClientSecret,\n      //add-line\n      callbackURL: '/auth/cisco/callback',\n      //add-line\n    },\n    //add-line\n    (accessToken, refreshToken, profile, done) => {\n      //add-line\n      console.log(accessToken);\n      //add-line\n      console.log(profile);\n      //add-line\n    }\n    //add-line\n  )\n  //add-line\n);\n")),(0,o.kt)("p",null,"In the above code, we tell the imported Passport library to use a new ",(0,o.kt)("inlineCode",{parentName:"p"},"CiscoStrategy"),". We give the ",(0,o.kt)("inlineCode",{parentName:"p"},"CiscoStrategy")," one argument with a few different fields, ",(0,o.kt)("inlineCode",{parentName:"p"},"clientID"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"clientSecret"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"callbackURL"),". The two client values are used by the server to make the call to our integration and the ",(0,o.kt)("inlineCode",{parentName:"p"},"callbackURL")," URL is used by the integration so it knows who to send the data back to."),(0,o.kt)("p",null,"Our ",(0,o.kt)("inlineCode",{parentName:"p"},"callbackURL")," is the same as the ",(0,o.kt)("inlineCode",{parentName:"p"},"Redirect URI")," we created in the Webex Integration.  "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"callbackURL")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Redirect URI")," must match otherwise WebEx will not allow the flow to continue. This is to prevent anyone from trying to take over the session.")),(0,o.kt)("p",null,"The second argument of the ",(0,o.kt)("inlineCode",{parentName:"p"},"CiscoStrategy")," is a callback function. The callback function has four inputs, ",(0,o.kt)("inlineCode",{parentName:"p"},"accessToken"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshToken"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"profile"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"done"),"\nOnce a successful authentication request occurs, this callback function is called and we can then store the information we want."),(0,o.kt)("p",null,"Right now, we will just console this information to show what is returned from a successful request. After we have configured the MongoDb to accept users, we will come back and add some logic to check for users and store them."),(0,o.kt)("p",null,"But before that, we will configure the authentication routing."),(0,o.kt)("h3",{id:"authentication-routes"},"Authentication Routes"),(0,o.kt)("p",null,"the authentication routes will be be used to send authentiation requests to different services and to receive these services responses.\nTo create them, we need to make a new file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes")," directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"authRoutes")," if it does not already exist."),(0,o.kt)("p",null,"After it has been created, let's open that file in VSCode. We first need to import Passport like we did in the services file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=routes/authRoutes.js showLineNumbers",title:"routes/authRoutes.js",showLineNumbers:!0},"const passport = require('passport');\n")),(0,o.kt)("p",null,"Next we need to add our route handlers. There will be two, one for ",(0,o.kt)("inlineCode",{parentName:"p"},"/auth/cisco")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/auth/cisco/callback"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=routes/authRoutes.js showLineNumbers",title:"routes/authRoutes.js",showLineNumbers:!0},"const passport = require('passport');\n//add-line\napp.get(\n  '/auth/cisco',\n  passport.authenticate('cisco-spark', { scope: ['spark:all'] })\n);\n//add-line\napp.get('/auth/cisco/callback', passport.authenticate('cisco-spark'));\n")),(0,o.kt)("p",null,"Looking at the top route. We are expecting a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," request for ",(0,o.kt)("inlineCode",{parentName:"p"},"/auth/cisco"),". When we see this request we will forward the request to Passport to start the authentication flow. The first argument for the authentication request is what strategy it will use. This one will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"cisco-spark")," strategy."),(0,o.kt)("p",null,"The second argument is the ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," of what data we want to get back from the authentication request. In this case, it is the same ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," we defined in the Webex Integration. This first request that is sent to WebEx will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," like we saw in the OAuth flow, but no user data. The ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," is like a ticket."),(0,o.kt)("p",null,"We will exchange this ticket for the user data in the callback. Here is an example of what is returned as a URL:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:5000/auth/cisco/callback?code=YjJkNzdlOWItMTJkC00ZmI2LTg5NWUtMjZkYzFlNGVjZTY1Y2NhMTQ0YmMtYWY3_PF84_1eb65fdf-9643-417f-9974-ad72cae0e10f")),(0,o.kt)("p",null,"The second route, is the route we are using as the callback for the integration. This callback route will make another call back to WebEx, but it will pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"code")," from the previous request as an argument. Now that we have given the ticket back to WebEx, it will give us the user data we requested."),(0,o.kt)("p",null,"We have written our route handlers but if you haven't noticed, cannot run them because there is no ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," object in this file. To get around this and to keep a modular approach in this application. We need to wrap our route handlers in a function that is exported. Then the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," will be able to pass the main ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," to the routes.\nTo do this, we can create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"module.exports")," and then make it so it returns a function with ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," as an argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=routes/authRoutes.js showLineNumbers",title:"routes/authRoutes.js",showLineNumbers:!0},"const passport = require('passport');\n//add-line\nmodule.exports = (app) => {\n  app.get(\n    '/auth/cisco',\n    passport.authenticate('cisco-spark', { scope: ['spark:all'] })\n  );\n  app.get('/auth/cisco/callback', passport.authenticate('cisco-spark'));\n  //add-line\n};\n")),(0,o.kt)("p",null,"We have finished the authRoutes for the time being. We will come back here after the MongoDb has been setup for our users."),(0,o.kt)("p",null,"The last step to amke sure our authentication flow works, is to import and call everything we need in the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file."),(0,o.kt)("h3",{id:"running-the-routes-and-service"},"Running the routes and service"),(0,o.kt)("p",null,"Open the ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," in VSCode. The first thing we need to is to require the Passport service. Normally, we would set some variable equal what we are importing. In this case we do not need to set it equal to a variable beacause we do not need to invoke anything. We just need the service available for the routing. The import will look the below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=index.js showLineNumbers",title:"index.js",showLineNumbers:!0},"const express = require('express');\nconst mongoose = require('mongoose');\n//add-line\nrequire('./services/passport');\nrequire('./models/Event');\n\nconst port = 5000;\n\nmain().catch((err) => console.log(err));\n\nasync function main() {\n  await mongoose.connect('mongodb://localhost:27017');\n  // use `await mongoose.connect('mongodb://user:password@localhost:27017/test');` if your database has auth enabled\n}\n\nconst app = express();\napp.use(express.json());\n\nrequire('./routes/eventRoutes')(app);\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n")),(0,o.kt)("p",null,"Our service has been added, now we need to import the ",(0,o.kt)("inlineCode",{parentName:"p"},"authRoutes")," function we exported and pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," to them for them to work properly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=index.js showLineNumbers",title:"index.js",showLineNumbers:!0},"const express = require('express');\nconst mongoose = require('mongoose');\nrequire('./services/passport');\nrequire('./models/Event');\n\nconst port = 5000;\n\nmain().catch((err) => console.log(err));\n\nasync function main() {\n  await mongoose.connect('mongodb://localhost:27017');\n  // use `await mongoose.connect('mongodb://user:password@localhost:27017/test');` if your database has auth enabled\n}\n\nconst app = express();\napp.use(express.json());\n//add-line\nrequire('./routes/authRoutes')(app);\n\nrequire('./routes/eventRoutes')(app);\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n")),(0,o.kt)("p",null,"To test that our flow works, we can run ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js"),". Run the command ",(0,o.kt)("inlineCode",{parentName:"p"},"node index.js")," and it will start the server. In a browser, go to ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:5000/auth/cisco"),". It should take you to a login and ask for permission to give the app your info. After this, it will hang and never load a new page. Check the CLI and there should now be some json data. This is the profile we logged out in the Passport service. I should look similar to what is below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"showLineNumber",showLineNumber:!0},"{\n    provider: 'cisco-spark',\n    id: 'Y2lzYOWE',\n    displayName: 'Ryan Maclennan',\n    emails: [ 'rymaclen@cisco.com' ],\n    avatar: 'https://63cd9a~9a06f454eaf94e439575028d59b2b171~1600',\n    created: '1900-06-21',\n    _json: {\n        id: 'Y2lzY22NkOWE',\n        emails: [ 'rymaclen@cisco.com' ],\n        phoneNumbers: [ [Object], [Object] ],\n        displayName: 'Ryan Maclennan',\n        nickName: 'Ryan',\n        firstName: 'Ryan',\n        lastName: 'Maclennan',\n        userName: 'rymaclen@cisco.com',\n        avatar: 'https://avatar-prod-us-east-2.webexcontent.com/06f454eaf94e439575028d59b2b171~1600',\n        orgId: 'OSVpBVElPTi8xZWI2NWZkZi05NjQ',\n        created: '1900-06-21',\n        lastModified: '2023-01-11T17:57:33.357Z',\n        lastActivity: '2023-01-17T23:04:20.927Z',\n        status: 'active',\n        type: 'person',\n        department: '0',\n        title: 'Technical Marketing Engineer',\n    }\n}\n")),(0,o.kt)("p",null,"We have a working authentication flow and have finished the intial setup of Passport. We can now move on to adding the database."))}u.isMDXComponent=!0}}]);